<li class="is-active md:h-full" data-tab="description">
    <div class="description is-full-height has-auto-scrolling mb-15px p-15px">
        <div class="markdown prose max-w-none" id="description">
            <p>Given an array of positive or negative integers </p>
            <p><code> I= [i<sub>1</sub>,..,i<sub>n</sub>]</code></p>
            <p>you have to produce a sorted array P of the form </p>
            <p><code>[ [p, sum of all i<sub>j</sub> of I for which p is a prime factor (p positive) of i<sub>j</sub>] ...]</code></p>
            <p>P will be sorted by increasing order of the prime numbers. The final result has to be given as a string in Java, C#, C, C++ and as an array of arrays in other languages.</p>
            <p>Example:</p>
            <pre style="display: none;"><code class="language-fortran"><span class="cm-variable">I</span> <span class="cm-operator">=</span> (<span class="cm-operator">/</span><span class="cm-number">12</span>, <span class="cm-number">15</span><span class="cm-operator">/</span>)<span class="cm-variable">;</span> <span class="cm-operator">//</span> <span class="cm-keyword">result</span> <span class="cm-operator">=</span> <span class="cm-string">"(2 12)(3 27)(5 15)"</span>
</code></pre>
            <pre><code class="language-python"><span class="cm-variable">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>] <span class="cm-comment"># result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-elixir"><span class="cm-tag">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>] <span class="cm-comment"># result = [{2, 12}, {3, 27}, {5, 15}]</span>
</code></pre>
            <pre style="display: none;"><code class="language-rust"><span class="cm-variable">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>] # <span class="cm-variable">result</span> <span class="cm-operator">=</span> [(<span class="cm-number">2</span>, <span class="cm-number">12</span>), (<span class="cm-number">3</span>, <span class="cm-number">27</span>), (<span class="cm-number">5</span>, <span class="cm-number">15</span>)]
</code></pre>
            <pre style="display: none;"><code class="language-swift"><span class="cm-variable">I</span> <span class="cm-operator">=</span> <span class="cm-punctuation">[</span><span class="cm-number">12</span><span class="cm-punctuation">,</span> <span class="cm-number">15</span><span class="cm-punctuation">]</span> # <span class="cm-variable">result</span> <span class="cm-operator">=</span> <span class="cm-punctuation">[</span><span class="cm-punctuation">(</span><span class="cm-number">2</span><span class="cm-punctuation">,</span> <span class="cm-number">12</span><span class="cm-punctuation">)</span><span class="cm-punctuation">,</span> <span class="cm-punctuation">(</span><span class="cm-number">3</span><span class="cm-punctuation">,</span> <span class="cm-number">27</span><span class="cm-punctuation">)</span><span class="cm-punctuation">,</span> <span class="cm-punctuation">(</span><span class="cm-number">5</span><span class="cm-punctuation">,</span> <span class="cm-number">15</span><span class="cm-punctuation">)</span><span class="cm-punctuation">]</span>
</code></pre>
            <pre style="display: none;"><code class="language-ruby"><span class="cm-tag">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>] <span class="cm-comment"># result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-java"><span class="cm-variable">I</span> <span class="cm-operator">=</span> {<span class="cm-number">12</span>, <span class="cm-number">15</span>}; <span class="cm-comment">// result = "(2 12)(3 27)(5 15)"</span>
</code></pre>
            <pre style="display: none;"><code class="language-cpp"><span class="cm-variable">I</span> <span class="cm-operator">=</span> {<span class="cm-number">12</span>, <span class="cm-number">15</span>}; <span class="cm-comment">// result = "(2 12)(3 27)(5 15)"</span>
</code></pre>
            <pre style="display: none;"><code class="language-c"><span class="cm-variable">I</span> <span class="cm-operator">=</span> {<span class="cm-number">12</span>, <span class="cm-number">15</span>}; <span class="cm-comment">// result = "(2 12)(3 27)(5 15)"</span>
</code></pre>
            <pre style="display: none;"><code class="language-csharp"><span class="cm-variable">I</span> <span class="cm-operator">=</span> {<span class="cm-number">12</span>, <span class="cm-number">15</span>}; <span class="cm-comment">// result = "(2 12)(3 27)(5 15)"</span>
</code></pre>
            <pre style="display: none;"><code class="language-clojure"><span class="cm-variable">I</span> <span class="cm-keyword">=</span> <span class="cm-bracket">[</span><span class="cm-number">12</span>, <span class="cm-number">15</span><span class="cm-bracket">]</span> <span class="cm-comment">; result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-haskell"><span class="cm-variable-2">I</span> <span class="cm-keyword">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>] <span class="cm-comment">-- result = [(2,12),(3,27),(5,15)]</span>
</code></pre>
            <pre style="display: none;"><code class="language-javascript"><span class="cm-variable">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>]; <span class="cm-comment">//result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-coffeescript"><span class="cm-variable">I</span> <span class="cm-punctuation">=</span> <span class="cm-punctuation">[</span><span class="cm-number">12</span><span class="cm-punctuation">,</span> <span class="cm-number">15</span><span class="cm-punctuation">]</span> <span class="cm-comment"># result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-typescript"><span class="cm-variable">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>]; <span class="cm-comment">//result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-php"><span class="cm-variable">I</span> <span class="cm-operator">=</span> [<span class="cm-number">12</span>, <span class="cm-number">15</span>]; <span class="cm-comment">//result = [[2, 12], [3, 27], [5, 15]]</span>
</code></pre>
            <pre style="display: none;"><code class="language-lua"><span class="cm-variable">I</span> = {<span class="cm-number">12</span>, <span class="cm-number">15</span>} :: <span class="cm-variable">result</span> = {{<span class="cm-number">2</span>, <span class="cm-number">12</span>}, {<span class="cm-number">3</span>, <span class="cm-number">27</span>}, {<span class="cm-number">5</span>, <span class="cm-number">15</span>}}
</code></pre>
            <pre style="display: none;"><code class="language-pascal"><span class="cm-variable">I</span> <span class="cm-operator">=</span> <span class="cm-comment">{12, 15}</span> :: <span class="cm-keyword">result</span> <span class="cm-operator">=</span> <span class="cm-string">'[(2 12)(3 27)(5 15)]'</span>
</code></pre>
            <p>[2, 3, 5] is the list of all prime factors of the elements of I, hence the result.</p>
            <p><strong>Notes:</strong></p>
            <ul>
                <li>It can happen that a sum is 0 if some numbers are negative!</li>
            </ul>
            <p>Example: <code>I = [15, 30, -45]</code> 5 divides 15, 30 and (-45) so 5 appears in the result, the sum of the numbers for which 5 is a factor is 0 so we have [5, 0] in the result amongst others. </p>
            <ul>
                <li>In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.</li>
            </ul>
        </div>
        <hr>
        <div class="mt-15px"><span><i class="icon-moon-tag "></i></span>
            <div class="keyword-tag">Algorithms</div>
            <div class="keyword-tag">Numbers</div>
            <div class="keyword-tag">Arrays</div>
        </div>
        <hr><br>
        <div class="text-center">
            <a class="hover:text-current" data-tippy-content="Supercharge your technical hiring with developer assessments." data-tippy-placement="top" href="https://www.qualified.io?utm_source=codewars&amp;utm_medium=web" target="_blank">
                <div class="flex items-baseline justify-center"><span class="pl-1 text-xs inline-block">powered by</span><img class="h-4 inline-block dark:hidden pl-1" src="/assets/logos/qualified-black-b052752a4beaf94810c9d982f495680e2a9eb207824764ef98240ccef15cfbb1.svg"><img class="h-4 hidden dark:inline-block pl-1"
                        src="/assets/logos/qualified-white-7cba1bde874154ee4f39d50aebd5b7e435f5b21af9884b236a60d9015039e7f0.svg"></div>
            </a>
        </div>
    </div>
</li>